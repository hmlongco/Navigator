{"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Dismissible Views","roleHeading":"Article","modules":[{"name":"NavigatorUI"}],"role":"article"},"seeAlsoSections":[{"identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints"],"title":"The Basics","generated":true,"anchor":"The-Basics"}],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"How does a presented view dismiss itself? How does a parent view dismiss its children when needed?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if we don’t have access to the state that triggered the original presentation?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And what about deep-linking? Linking to a known location an application is easy when an application is launched, but what if the application’s been running for a while? What if the user’s presented a sheet or fullscreen cover view and is in the middle of doing something else?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"How do you return to a known state in the application?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And what if I want to "},{"inlineContent":[{"text":"prevent","type":"text"}],"type":"emphasis"},{"type":"text","text":" such things from happening if, say, I’m in the middle of a banking transaction?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these problems are solved in Navigator by using managed "},{"inlineContent":[{"type":"text","text":"dismissible"}],"type":"emphasis"},{"type":"text","text":" views."}]},{"type":"heading","text":"Dismissible Views","level":2,"anchor":"Dismissible-Views"},{"inlineContent":[{"text":"So what’s a dismissible view?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Well, the easy answer would be that a dismissible view is a presented view that can be dismissed… and that’s true. But a better definition for our","type":"text"},{"text":" ","type":"text"},{"text":"purposes is that a dismissible view is a ","type":"text"},{"inlineContent":[{"type":"text","text":"presented"}],"type":"emphasis"},{"type":"text","text":" view that Navigator "},{"inlineContent":[{"type":"text","text":"knows how to dismiss"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"type":"heading","text":"The Navigation Tree","anchor":"The-Navigation-Tree"},{"inlineContent":[{"text":"As mentioned in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree"},{"text":", Navigator builds a navigation tree of Navigators within your application, starting from the application root, into each ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack"},{"type":"text","text":", and from there into every presented view wrapped in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Think of a TabView where each tab has it’s own ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack"},{"text":". Each managed stack and associated Navigator is a child of the application root.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And if a tab presents a view via a sheet or cover, that view is "},{"inlineContent":[{"text":"also","type":"text"}],"type":"emphasis"},{"type":"text","text":" a node in the navigation tree."}],"type":"paragraph"},{"inlineContent":[{"text":"The result is a tree of navigation stacks (and paths), presented views that can have their own stacks and paths and presented views, and so on, and so on, as needed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This tree can be walked by Navigator and the application at will, allowing the dismissal of presented views from child or root, without the need for passed bindings or closures."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Checkpoints","text":"Checkpoints"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that dismissal is largely imperative and if you’re in a child view a better solution is returning to previously established "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But that doesn’t help if you’re deep linking of if you’re engaged in cross-module navigation, so let’s be about it."}]},{"level":2,"text":"Operations","type":"heading","anchor":"Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So here are some of Navigator’s “dismiss” operations, along with examples and use cases."}]},{"level":3,"text":"• Dismiss","type":"heading","anchor":"-Dismiss"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismisses the currently presented ManagedNavigationStack."}]},{"syntax":"swift","code":["Button(\"Dismiss\") {","    navigator.dismiss()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that unlike Apple’s dismiss environment variable, Navigator’s dismiss function doesn’t “pop” the current view on the navigation path.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"It exists ","type":"text"},{"inlineContent":[{"type":"text","text":"solely"}],"type":"emphasis"},{"text":" to dismiss the currently presented view from ","type":"text"},{"inlineContent":[{"text":"within","type":"text"}],"type":"emphasis"},{"text":" the","type":"text"},{"text":" ","type":"text"},{"text":"currently presented view.","type":"text"}]},{"level":3,"text":"• DismissPresentedViews","type":"heading","anchor":"-DismissPresentedViews"},{"type":"paragraph","inlineContent":[{"text":"Dismisses any presented sheet or fullScreenCover views presented by this Navigator using ","type":"text"},{"code":"navigator.navigate(to:)","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","code":["Button(\"Dismiss Presented Views\") {","    navigator.dismissPresentedViews()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This is used in the parent view to dismiss its children, effectively the opposite of ","type":"text"},{"code":"dismiss()","type":"codeVoice"},{"text":".","type":"text"}]},{"level":3,"text":"• DismissAnyChildren","type":"heading","anchor":"-DismissAnyChildren"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismisses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":" presented by this Navigator or by any child of this Navigator in the current"},{"type":"text","text":" "},{"type":"text","text":"navigation tree."}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Dismiss Any Children\") {","    navigator.dismissAnyChildren()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns true if a dismissal occurred, false otherwise."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is used in the parent view to dismiss its children, effectively the opposite of "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":"."}]},{"type":"heading","anchor":"-DismissAny","level":3,"text":"• DismissAny"},{"type":"paragraph","inlineContent":[{"text":"Returns to the root Navigator and dismisses ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"ManagedNavigationStack","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"ManagedPresentationView","type":"codeVoice"},{"text":" presented anywhere in the navigation tree.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Dismiss Any\") {","    try? navigator.dismissAny()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns true if a dismissal occurred, false otherwise."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This functionality is used extensively in deep linking and cross-module navigation in order to clear any presented views prior to taking the user"},{"type":"text","text":" "},{"type":"text","text":"elsewhere in the application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“I don’t care what the user is doing. Shut it down.”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It dismisses anything. Anywhere."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this call can throw and fail if navigation is locked."}]},{"type":"heading","anchor":"Locking-Navigation","level":2,"text":"Locking Navigation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned earlier, what if I want to "},{"inlineContent":[{"type":"text","text":"prevent"}],"type":"emphasis"},{"type":"text","text":" dismissal from happening?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, for example, I presented a sheet to pay bils and I don’t want a deep link to interrupt my flow?"}]},{"inlineContent":[{"text":"Just add the ","type":"text"},{"code":"navigationLocked","type":"codeVoice"},{"text":" modifier to the presented view.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["MyTransactionView()","    .navigationLocked()"]},{"inlineContent":[{"type":"text","text":"You can still dismiss your view, and a parent can still dismiss its child, but the global "},{"type":"codeVoice","code":"dismissAny"},{"type":"text","text":" action will fail and throw an error."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When the view containing the navigation lock is dismissed, the global lock is cleared automatically."}],"type":"paragraph"},{"anchor":"Modifiers","level":2,"type":"heading","text":"Modifiers"},{"inlineContent":[{"type":"text","text":"Dismissal can also be purely state driven using the following modifiers."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ dismiss",".navigationDismiss(trigger: $dismiss1)","","\/\/ dismiss presented views",".NavigationDismissPresentedViews(trigger: $dismiss2)","","\/\/ dismiss any children",".navigationDismissAnyChildren(trigger: $dismiss3)","","\/\/ dismiss any",".navigationDismissAny(trigger: $dismiss4)"]},{"inlineContent":[{"type":"text","text":"Binding must be a boolean value and toggled to true to trigger the dismissal. Bound value will be reset to false afterwards."}],"type":"paragraph"},{"anchor":"Checkpoints","level":2,"type":"heading","text":"Checkpoints"},{"inlineContent":[{"type":"text","text":"Keep in mind that dismissal is largely imperative and fragile. It depends on knowledge of how the app is constructed and how the views are presented."}],"type":"paragraph"},{"inlineContent":[{"text":"So, again, if you’re in a child view a better solution is returning to a previously established checkpoint (","type":"text"},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","isActive":true,"type":"reference"},{"text":").","type":"text"}],"type":"paragraph"},{"anchor":"Internals","level":3,"type":"heading","text":"Internals"},{"inlineContent":[{"text":"That said, you should be aware that checkpoint behavior is based in part on dismissible views!","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["internal func returnToCheckpoint<T>(_ checkpoint: NavigationCheckpoint<T>) {","    guard let (navigator, found) = find(checkpoint) else {","        return","    }","    ...","    _ = navigator.dismissAnyChildren()","    _ = navigator.pop(to: found.index)","    ...","}"]},{"inlineContent":[{"text":"This is just one example of how Navigator’s core functionality is used to enable more complex behaviors.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"},"abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}],"kind":"article","variants":[{"paths":["\/documentation\/navigatorui\/dismissible"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://NavigatorUI/documentation/NavigatorUI/NavigationTree":{"url":"\/documentation\/navigatorui\/navigationtree","type":"topic","kind":"article","title":"Understanding The Navigation Tree","abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","role":"article"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedPresentationView":{"role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ManagedPresentationView"}],"abstract":[{"text":"Allows presented views not in a navigation stack to be dismissed using a Navigator.","type":"text"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","title":"ManagedPresentationView","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedPresentationView"}],"url":"\/documentation\/navigatorui\/managedpresentationview"},"doc://NavigatorUI/documentation/NavigatorUI":{"abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"url":"\/documentation\/navigatorui","kind":"symbol","role":"collection","title":"NavigatorUI","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","type":"topic"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedNavigationStack":{"navigatorTitle":[{"text":"ManagedNavigationStack","kind":"identifier"}],"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","role":"symbol","url":"\/documentation\/navigatorui\/managednavigationstack","abstract":[{"text":"Creates a NavigationStack and its associated Navigator that “manages” the stack.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedNavigationStack","kind":"identifier"}],"title":"ManagedNavigationStack","type":"topic","kind":"symbol"},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"url":"\/documentation\/navigatorui\/destinations","role":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","type":"topic","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"kind":"article","title":"Destinations"},"doc://NavigatorUI/documentation/NavigatorUI/Checkpoints":{"title":"Checkpoints","role":"article","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","type":"topic","abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"url":"\/documentation\/navigatorui\/checkpoints","kind":"article"}}}